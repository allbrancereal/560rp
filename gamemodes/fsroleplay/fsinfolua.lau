
// Buisiness

getBuisinessInfo (id) // returns the buisiness table if it exits
_pMeta:setShares( num, int , lv , xp ) // Sets a players buisiness profile (num = id, int = shares)
_pMeta:getShares( num ) // returns the shares of a player from buisiness id if they have them
_pMeta:BuisinessPayday() // sends a buisiness payday to the player
_pMeta:addShares( num , int ) // adds buisiness shares to the id of the buisiness (num = id , int = # of shares)
_pMeta:LvlUPBuisiness( id ) // levels a buisiness up
_pMeta:buyStock( num , amt ) // num = id , buys shares for a player with money
_pMeta:getAllBuisinesses() // returns players buisiness table
_pMeta:getBuisinessLevel( int ) // returns buisiness level (int = id)
_pMeta:getBuisinessXP( int ) // returns the buisiness xp (int = id )
_pMeta:setBuisinessXP( int, xp )// sets buisiness xp to id
_pMeta:setBuisinessLevel( int , lv ) // sets the buisiness level per id
saveBuisiness( _p ) // saves a specific players buisiness and loads them back up again
loadBuisinesses( _p ) // loads a players buisinesses or creates them if they are not there
setupClientBuisinessData( _p ) // sets up the clients buisiness data so they can start doing stuff with it

-- hooks --
TABLE.OnSold = Function /
TABLE.CanBuy = Function / returns bool
TABLE.PostCanBuy = function /
TABLE.OnBought = function /

// Quests

_pMeta:IsOnQuest( id ) // returns false if the player has not finished the quest, returns true if they have;
_pMeta:GetQuestCondition( id ) // returns if the player fullfilled the quest condition (id = questid)
_pMeta:RewardQuest( id ) // rewards the player for their quest if they are on it
_pMeta:SetQuestStep( _id , _int )// set the step of the quest per id
_pMeta:canStartQuest( id ) // returns whether the player needs to do prerequisites to start the quest
_pMeta:StartQuest( id ) // starts a quest for the player if they do not already have it completed
_pMeta:EraseQuest( id ) // completely removes the players information about the quest
_pMeta:CompleteQuest( id ) // completes the quest of the player per id (networks the player, no reward)
saveQuests( _p ) // saves the players quests to data folders
loadQuests( _p ) // loads the players quests from the data folders

-- hooks -- 

TABLE.Condition = function / returns bool
TABLE.CanStart = function / returns bool
TABLE.onComplete = function 
TABLE.onStart = function

// Model library

ExplodeModelInto( path ) // with our custom path (gender_id) this function splits the gender and id and returns a table with both
iterateModelTable( gender , id ) // iterates through our models to find the information about it per id and gender
refreshModelTable() // refreshes client/server of real playermodels that we can use

// database
fsdb:Query( query , callback ) // sends a query to the database and calls back a function
createPlayer( _p ) // creates a player on the database and loads them up
updateClientID( _p ) // updates the database if they have a new username
LoadPlayer( _p ) // loads a players data from the database or creates a new one if nothing is found
fsdb_changeSex( _p ) // changes the sex of the character directly
fsdb_changeModel( _p , str ) // iterates through the model table and updates the database on the new model
fsdb.saveWeather() // saves the simple weather time
fsdb.loadWeather() // loads the weather time

// player shared general

_pMeta:getRPName() // returns a string containing first and last name with a space inbetween
_pMeta:IsGovernmentOfficial() // iterates through our police table to see whether they are part of the government
_pMeta:getFirstName() // returns the string first name of the player
_pMeta:getLastName() // returns the string last name of the player
_pMeta:setFirstName( str ) // sets the players first name and networks it
_pMeta:setLastName( str ) // sets the players last name and networks it
_pMeta:setClientGender( int ) // sets the client gender to a number
_pMeta:getGender() // returns the players gender
_pMeta:getClothes() // returns the players clothes (deprecated)
_pMeta:Notify( str ) // notifies a player with a string (thx sandbox)
_pMeta:getBank() // returns the players banking information
_pMeta:getMoney() // returns the players money information
_pMeta:setBank( int ) // sets the banks information and networks it
_pMeta:canAffordBank( int ) // contrasts the clients bank money and the integer to a bool
_pMeta:addBank( int ) // adds money to the players bank 
_pMeta:BankToMoney( int ) // lets the player take money from the bank (with interest)
_pMeta:MoneyToBank( int ) // sets the players money to the bank
_pMeta:setMoney( int ) // sets the players money and networks it
_pMeta:canAfford( int ) // contrasts the players money on hand with the int and returns a bool
_pMeta:addMoney( int ) // sets the players money and networks it
_pMeta:getLevel( ) // gets the players level
_pMeta:setLevel( int ) // sets the players level and networks it
_pMeta:getBankAccount() // returns the integer level of the bank account
_pMeta:setBankAccount( int ) // sets the bank account level to the client and networks it

// Properties 

_eMeta:IsDoor() // returns whether the entity is a door
_eMeta:IsPoliceDoor() // returns whether the entity is a police door
_eMeta:IsNeutralDoor() // returns whether the entity is a neutral door
_eMeta:IsBuisinessDoor() // returns whether the entity is a buisiness door
_eMeta:GetDoorOwner() // returns the doors owner if the entity is a door
_pMeta:CanManipulateDoor( door ) // compares the entity to IsDoor and finds out whether the player is the owner 
_eMeta:GetDoorData( int ) // returns the property table of the door
_pMeta:GiveProperty( id ) // gives the player the property specified by id
_pMeta:TakeProperty( id ) // takes the property from the player by id
_eMeta:GetPropertyTable() // returns the property table of the door

-- hooks -

TABLE.OnSold = function
TABLE.CanBuy = function / returns bool
TABLE.PostCanBuy = function
TABLE.OnBought = function()